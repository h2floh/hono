{{- $args := dict "dot" . "component" "service-auth" "name" "service-auth-conf" -}}
apiVersion: v1
kind: Secret
metadata:
  {{- include "hono.metadata" $args | nindent 2 }}
type: Opaque
stringData:
  application.yml: |
    hono:
      app:
        maxInstances: {{ .Values.authServer.hono.app.maxInstances }}
      auth:
        amqp:
          {{- if .Values.authServer.hono.auth.amqp }}
          {{- .Values.authServer.hono.auth.amqp | toYaml | nindent 10 }}
          {{- else }}
          bindAddress: "0.0.0.0"
          keyPath: "/etc/hono/key.pem"
          certPath: "/etc/hono/cert.pem"
          trustStorePath: "/etc/hono/trusted-certs.pem"
          insecurePortBindAddress: "0.0.0.0"
          insecurePortEnabled: true
          {{- end }}
        svc:
          {{- if .Values.authServer.hono.auth.svc }}
          {{- .Values.authServer.hono.auth.svc | toYaml | nindent 10 }}
          {{- else }}
          permissionsPath: "file:///etc/hono/permissions.json"
          {{- end }}
      {{- include "hono.healthServerConfig" .Values.authServer.hono.healthServer | nindent 6 }}
{{- if not .Values.authServer.extraSecretMounts }}
data:
  key.pem: {{ .Files.Get "hono-demo-certs-jar/auth-server-key.pem" | b64enc }}
  cert.pem: {{ .Files.Get "hono-demo-certs-jar/auth-server-cert.pem" | b64enc }}
  trusted-certs.pem: {{ .Files.Get "hono-demo-certs-jar/trusted-certs.pem" | b64enc }}
  permissions.json: {{ .Files.Get "example/example-permissions.json" | b64enc }}
{{- end }}
